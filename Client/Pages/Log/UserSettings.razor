@*@page "/usersettings"*@
@attribute [Authorize]

@inject ILocalStorageService _LocalStorage
@inject IApiUserWithToken _IApiUserWithToken
@inject NavigationManager _Navigation
@inject ToastService _toastService


<div class="float-start">
    <EditForm Model="userEditProfileViewModel" OnValidSubmit="HandChangeData">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label>
                Nick:
                <InputText @bind-Value="userEditProfileViewModel.Name"></InputText>
            </label>
        </p>
        <p>
            <label>
                Email:
                <InputText @bind-Value="userEditProfileViewModel.Email"></InputText>
            </label>
        </p>
        @if (DifferenthatNull(userEditProfileViewModel.Name) || DifferenthatNull(userEditProfileViewModel.Email))
        {
            <p>
                Potwierdź się podając hasło
            </p>
            <p>
                <label>
                    Hasło:
                    <InputText @bind-Value="userLogin.Password"></InputText>
                </label>
            </p>
        }
        <button class="btn btn-primary" type="submit">Modyfikuj</button>
    </EditForm>
</div>


@code {
    private UserEditProfileViewModel userEditProfileViewModel = new();
    private UserLogin userLogin = new();
    private string PasswordIsNull = "Podaj Hasło";
    private UserLocalStorage UserStorage = new();

    //pobranie danych user widzi swoje dane
    protected override async Task OnInitializedAsync()
    {
        UserStorage = await _LocalStorage.GetItemAsync<UserLocalStorage>(nameof(UserLocalStorage));
        userLogin.Email = UserStorage.Email;
    }

    // główna metoda
    //wysłanie zaktualizowane dane
    //name
    //email
    private async Task HandChangeData()
    {
        if (!string.IsNullOrEmpty(userLogin.Password))
        {
            //if (NewDataIsDifferenthatNull(userEditProfileViewModel.Name) || NewDataIsDifferenthatNull(userEditProfileViewModel.Email) )
            await AllIsWell();
        }
    }

    private static readonly string[] Toasts = new[]
                                   {
        "Zaktuzalizowano dane","Coś poszło nie tak" , "Email jest już wykorzystany", "Nick jest zajęty"
    };

    // wkońcu wysłanie danych
    private async Task AllIsWell()
    {
        UserEditProfile userEditProfile = new();
        userEditProfile.Name = userEditProfileViewModel.Name;
        userEditProfile.Email = userEditProfileViewModel.Email;

        var Message = await _IApiUserWithToken.EditProfilPach(userLogin, userEditProfile);


        if (Message.IsSuccessStatusCode)
        {
            UpdateLocalStorage(userEditProfile.Email, userEditProfile.Name);
            //Console.WriteLine("Zaktuzalizowano dane");
            _toastService.ShowToast(Toasts[0], ToastLevel.Success);
            _Navigation.NavigateTo("");
        }
        else
        {
            _toastService.ShowToast(Toasts[1], ToastLevel.Error);
            Console.WriteLine("Coś poszło nie tak");
        }
    }

    //poprawka w local storage
    private async void UpdateLocalStorage(string? email, string? name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            UserStorage.Name = name;
        }
        if (!string.IsNullOrEmpty(email))
        {
            UserStorage.Email = email;
        }

        await _LocalStorage.RemoveItemAsync(nameof(UserLocalStorage));
        await _LocalStorage.SetItemAsync<UserLocalStorage>(nameof(UserLocalStorage), UserStorage);

    }

    //sprawdzanie pustych stringów
    private bool DifferenthatNull(string Data)
    {
        if (!string.IsNullOrEmpty(Data))
        {
            return true;
        }
        return false;
    }



}
