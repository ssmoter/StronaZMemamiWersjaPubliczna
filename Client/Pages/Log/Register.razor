@page "/Register"

@inject ToastService _toast;
@inject ILogger<Register> _logger;
@inject IApiUser _apiUser;
@inject NavigationManager _navigation;
@inject ILocalStorageService _localStorage;
@inject AuthenticationStateProvider AuthStateProvider

<div class="input-text-css">
    <dvi>
        <EditForm Model="userRegister" OnValidSubmit="RegisterAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (!string.IsNullOrEmpty(SecondPassword))
            {
                @if (userRegister.Password != SecondPassword)
                {
                    <div class="">
                        <p>
                            <span style="color:red">&nbsp;&nbsp;&nbsp;<span style="font-size:20px">&bull;&nbsp;</span>Hasła są różne</span>
                        </p>
                    </div>
                }
            }
            @if (email > 0)
            {
                <div class="">
                    <p>
                        <span style="color:red">&nbsp;&nbsp;&nbsp;<span style="font-size:20px">&bull;&nbsp;</span>@IndividualEmailString</span>
                    </p>
                </div>
            }
            <div @onclick="IndividualEmail">
                <div class="">
                    <label for="Name">Nick:</label>
                    <span>
                        <InputText id="" type="name" @bind-Value="userRegister.Name" class="form-control input-css"></InputText>
                    </span>
                </div>
                <div class="">
                    <label for="email">Email:</label>
                    <span>
                        <InputText id="" type="email" @bind-Value="userRegister.Email" class="form-control input-css"></InputText>
                    </span>

                </div>
                <div class="">
                    <label for="password">Hasło:</label>
                    <span>
                        <InputText id="" type="password" @bind-Value="userRegister.Password" class="form-control input-css"></InputText>
                    </span>
                </div>
                <div class="">
                    <label for="password">Powtórz hasło:</label>
                    <span>
                        <InputText id="" type="password" @bind-Value="SecondPassword" class="form-control input-css"></InputText>
                    </span>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Rejestracja</button>
        </EditForm>
    </dvi>
</div>
<div class="ad-css">
    <div>
        Kiedyś reklama
    </div>
</div>

@code {
    private UserRegisterClient userRegister = new();
    private string? SecondPassword = null;

    private string IndividualEmailString = "";
    int email = -1;

    private async Task IndividualEmail()
    {

        if (!string.IsNullOrEmpty(userRegister.Email))
        {
            email = await _apiUser.IndividualEmail(_logger, userRegister.Email);
            if (email == 0)
            {
                IndividualEmailString = "";
            }
            else if (email == 1)
            {
                IndividualEmailString = "Email został już zajęty ";
            }
            else if (email == 2)
            {
                IndividualEmailString = "Inny nieoczekiwany błąd ";
            }
        }
    }



    private async Task RegisterAsync()
    {
        if (userRegister.Password == SecondPassword)
        {
            if (email <= 0)
            {
                UserLogin login = await _apiUser.Register(_logger, userRegister);
                if (login != null)
                {
                    _toast.ShowToast("Zarejestrowano się", ToastLevel.Success);
                    await LogIn(login);
                }
            }
        }
        if (userRegister.Password != SecondPassword)
        {
            _toast.ShowToast("Hasła nie są identyczne", ToastLevel.Error);
        }
    }

    private async Task LogIn(UserLogin user)
    {
        var LogUser = await _apiUser.LogIn(user.Email, user.Password);


        if (LogUser != null)
        {

            UserLocalStorage userLocal = new();
            userLocal.Name = LogUser.Name;
            userLocal.Email = LogUser.Email;
            userLocal.Token = LogUser.Token;
            userLocal.Id = LogUser.SecondId;

            await _localStorage.SetItemAsync<UserLocalStorage>(nameof(UserLocalStorage), userLocal);

            await AuthStateProvider.GetAuthenticationStateAsync();
            _toast.ShowToast("Zalogowano się", ToastLevel.Success);
            _navigation.NavigateTo("");
        }


    }

}
