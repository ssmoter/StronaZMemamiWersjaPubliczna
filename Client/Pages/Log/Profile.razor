@page "/profile/{Id:int}"
@page "/profile/{UserName}"

@inject IApiUser _ApiUser

@if (UserPublic != null)
{
    <div class="col-auto">
        <center
        class="col-auto float-start">
            <div>
                <div>
                    <span>Profil @UserPublic.Name</span>
                    <span>@UserPublic.Like/-@UserPublic.UnLike</span>
                </div>
            </div>
            <div>
                <div>
                    <label>
                        Data założenia konta:<br />
                        @UserPublic.DataCreat.LocalDateTime
                    </label>
                </div>
                <div>
                    <label>Ostatnio online:@LastOnline</label>
                </div>
            </div>
        </center>
        <center class="col-auto float-start">
            &nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />
            &nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;<br />
        </center>
        <div class="col-auto">
            <AuthorizeView>
                <Authorized>
                    <div class="nav-item ">
                        <div @onclick="ToggleUserMenu">
                            <NavLink class="nav-tabs">
                                <span class="oi oi-document" aria-hidden="true">Edytuj Dane</span>
                            </NavLink>
                        </div>
                    </div>
                    @if (ToggleUserSetting)
                    {
                        <UserSettings></UserSettings>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="col-auto float-end">
        </div>
    </div>

    
}
else
{
    <h3>
        Loading...
    </h3>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    private string? Name;
    private UserPublic? UserPublic;
    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            UserPublic = await _ApiUser.ProfileUserPublic(Id);
        }
        if (UserName != null)
        {
            Name = UserName.Trim('"');
            UserPublic = await _ApiUser.ProfileUserPublic(Name);
        }
        WhenLastOnline();
    }
    private bool ToggleUserSetting = false;

    private void ToggleUserMenu()
    {
        ToggleUserSetting = !ToggleUserSetting;
    }
    private string? LastOnline;

    //konvertowanie czasu na informacje kiedy user był ostatnio online w godzinach/dniach
    private void WhenLastOnline()
    {
        DateTimeOffset dateTime;
        dateTime = DateTimeOffset.Now;
        long DateInt = dateTime.ToUnixTimeSeconds() - UserPublic.LastOnline.ToUnixTimeSeconds();
        if (DateInt <= 120)//sekundy
        {
            LastOnline = "Online";
        }
        if (DateInt > 120 && DateInt <= 86400)//godziny
        {
            LastOnline = DateTimeOffset.FromUnixTimeSeconds(DateInt).Hour.ToString() + " Godzin temu";
        }
        if (DateInt > 86400)//dni
        {
            LastOnline = DateTimeOffset.FromUnixTimeSeconds(DateInt).Day.ToString() + " Dni temu";
        }
    }



}
